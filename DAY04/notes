---

### 1. Closures

- A **closure** is a function that remembers the environment where it was created, so it can access variables from that outer scope even after that scope has finished.

```js
function outer() {
  let count = 0;
  return function inner() {
    count++;
    console.log(count);
  };
}

const counter = outer();
counter(); // 1
counter(); // 2
```

---

### 2. Destructuring

- Extract values from arrays or objects into variables easily.

```js
// Array destructuring
const arr = [10, 20, 30];
const [x, y] = arr;
console.log(x, y); // 10 20

// Object destructuring
const person = { name: "Alice", age: 25 };
const { name, age } = person;
console.log(name, age); // Alice 25
```

---

### 3. Async/Await

- Write asynchronous code that looks synchronous using `async` functions and `await` keyword.

```js
async function fetchData() {
  let response = await fetch("https://jsonplaceholder.typicode.com/posts");
  let data = await response.json();
  console.log(data.slice(0, 3)); // show first 3 posts
}

fetchData();
```

---

### 4. Working with JSON

- Convert between JavaScript objects and JSON strings:

```js
const obj = { name: "Bob", age: 30 };

// Object to JSON string
const jsonString = JSON.stringify(obj);
console.log(jsonString); // '{"name":"Bob","age":30}'

// JSON string to object
const parsedObj = JSON.parse(jsonString);
console.log(parsedObj.name); // Bob
```

---

### 5. Process Data with Array Methods

- Use built-in array methods to handle data easily.

```js
const numbers = [1, 2, 3, 4, 5];

// Map: double each number
const doubled = numbers.map((n) => n * 2);
console.log(doubled); // [2, 4, 6, 8, 10]

// Filter: only even numbers
const evens = numbers.filter((n) => n % 2 === 0);
console.log(evens); // [2, 4]

// Reduce: sum of numbers
const sum = numbers.reduce((total, n) => total + n, 0);
console.log(sum); // 15
```

---

### 6. Fetch Data with `.then()` and `.catch()` (No `Promise` keyword)

- Use `.then()` to handle asynchronous fetch requests:

```js
fetch("https://jsonplaceholder.typicode.com/posts")
  .then((response) => response.json())
  .then((data) => {
    console.log(data.slice(0, 3)); // first 3 posts
  })
  .catch((error) => {
    console.error("Error:", error);
  });
```

- `fetch` and `.then()` work behind the scenes with promises but you donâ€™t write the `Promise` keyword explicitly.

---

### 7. Callbacks (Old style async handling)

- Pass a function to be called later once async work is done.

```js
function fakeAsync(callback) {
  setTimeout(() => {
    callback("Done!");
  }, 1000);
}

fakeAsync((result) => {
  console.log(result);
});
```

---

# Summary:

- Use **closures** to remember outer variables inside functions.
- Use **destructuring** to easily extract values from arrays/objects.
- Use **async/await** or `.then()` for handling asynchronous code (e.g., with `fetch`).
- Work with **JSON** using `JSON.stringify` and `JSON.parse`.
- Use array methods like `.map()`, `.filter()`, `.reduce()` to process data.
- You can handle async without ever writing the `Promise` keyword explicitly by using **async/await** or `.then()`.
- **Callbacks** are the older way but still useful for simple async tasks.

---
