# ðŸ“˜ JavaScript Strings â€” Complete Notes with Operations & Methods

---

## 1. What is a String?

- A **string** is a sequence of characters used to represent text.
- In JavaScript, strings are **immutable** â€” you cannot change a character once a string is created.
- Strings are enclosed in single quotes `'...'`, double quotes `"..."`, or backticks `` `...` `` (template literals).

```js
let str1 = "Hello";
let str2 = "World";
let str3 = `Hello World`;
```

---

## 2. String Creation & Basic Operations

```js
let name = "Venkatesh";

// Length of string
console.log(name.length); // 9

// Access characters by index (0-based)
console.log(name[0]); // V
console.log(name.charAt(1)); // e

// Strings are immutable
// name[0] = "v";  // Has no effect
```

---

## 3. Common String Operations

| Operation         | Description                         | Example                   |
| ----------------- | ----------------------------------- | ------------------------- |
| Concatenation     | Join strings                        | `"Hello" + " " + "World"` |
| Template literals | Embed expressions                   | `` `Hi, ${name}!` ``      |
| Escape characters | Include special chars               | `"\n"`, `"\t"`, `"\\"`    |
| Multiline strings | Using backticks (template literals) | `` `Line1\nLine2` ``      |

Example:

```js
let greeting = "Hello" + " " + "World";
let greet2 = `Hello, ${name}!`;
console.log(greeting); // Hello World
console.log(greet2); // Hello, Venkatesh!
```

---

## 4. Important String Methods

### 4.1 Access and Search

| Method                 | Description               | Example                         |
| ---------------------- | ------------------------- | ------------------------------- |
| `.charAt(index)`       | Character at given index  | `"Hello".charAt(1)` â†’ "e"       |
| `.indexOf(substr)`     | First occurrence index    | `"Hello".indexOf("l")` â†’ 2      |
| `.lastIndexOf(substr)` | Last occurrence index     | `"Hello".lastIndexOf("l")` â†’ 3  |
| `.includes(substr)`    | Checks substring presence | `"Hello".includes("ll")` â†’ true |

Example:

```js
let str = "JavaScript";
console.log(str.charAt(4)); // S
console.log(str.indexOf("a")); // 1
console.log(str.lastIndexOf("a")); // 3
console.log(str.includes("Script")); // true
```

---

### 4.2 Extracting Parts of String

| Method                   | Description                                     | Example                          |
| ------------------------ | ----------------------------------------------- | -------------------------------- |
| `.slice(start, end)`     | Extracts substring (end excluded)               | `"Hello".slice(1,4)` â†’ "ell"     |
| `.substring(start, end)` | Similar to slice, but swaps args if start > end | `"Hello".substring(1,4)` â†’ "ell" |
| `.substr(start, length)` | Extracts substring of length                    | `"Hello".substr(1,3)` â†’ "ell"    |

Example:

```js
let text = "JavaScript";
console.log(text.slice(4, 10)); // Script
console.log(text.substring(4, 10)); // Script
console.log(text.substr(4, 6)); // Script
```

---

### 4.3 Case Conversion

| Method           | Description          | Example                           |
| ---------------- | -------------------- | --------------------------------- |
| `.toLowerCase()` | Convert to lowercase | `"Hello".toLowerCase()` â†’ "hello" |
| `.toUpperCase()` | Convert to uppercase | `"Hello".toUpperCase()` â†’ "HELLO" |

Example:

```js
let city = "Delhi";
console.log(city.toLowerCase()); // delhi
console.log(city.toUpperCase()); // DELHI
```

---

### 4.4 Trimming and Padding

| Method                    | Description                       | Example                        |
| ------------------------- | --------------------------------- | ------------------------------ |
| `.trim()`                 | Removes whitespace from both ends | `"  hello  ".trim()` â†’ "hello" |
| `.padStart(length, char)` | Pads string start to given length | `"5".padStart(3,"0")` â†’ "005"  |
| `.padEnd(length, char)`   | Pads string end to given length   | `"5".padEnd(3,"0")` â†’ "500"    |

Example:

```js
let val = "  text  ";
console.log(val.trim()); // "text"
console.log("5".padStart(3, "0")); // "005"
console.log("5".padEnd(3, "0")); // "500"
```

---

### 4.5 Splitting and Joining

| Method              | Description             | Example                               |
| ------------------- | ----------------------- | ------------------------------------- |
| `.split(separator)` | Split string into array | `"a,b,c".split(",")` â†’ \["a","b","c"] |
| `.join(separator)`  | Join array into string  | `["a","b","c"].join("-")` â†’ "a-b-c"   |

Example:

```js
let fruits = "apple,banana,orange";
let arr = fruits.split(",");
console.log(arr); // ["apple","banana","orange"]

let joined = arr.join(" & ");
console.log(joined); // "apple & banana & orange"
```

---

### 4.6 Replace and Repeat

| Method                         | Description                  | Example                                 |
| ------------------------------ | ---------------------------- | --------------------------------------- |
| `.replace(search, replace)`    | Replace first match          | `"hello".replace("l", "p")` â†’ "heplo"   |
| `.replaceAll(search, replace)` | Replace all matches (ES2021) | `"hello".replaceAll("l","p")` â†’ "heppo" |
| `.repeat(n)`                   | Repeat string n times        | `"ha".repeat(3)` â†’ "hahaha"             |

Example:

```js
let phrase = "foo bar foo";
console.log(phrase.replace("foo", "baz")); // "baz bar foo"
console.log(phrase.replaceAll("foo", "baz")); // "baz bar baz"
console.log("ha".repeat(4)); // "hahaha"
```

---

### 4.7 Checking Start/End

| Method                | Description                         | Example                           |
| --------------------- | ----------------------------------- | --------------------------------- |
| `.startsWith(substr)` | Checks if string starts with substr | `"hello".startsWith("he")` â†’ true |
| `.endsWith(substr)`   | Checks if string ends with substr   | `"hello".endsWith("lo")` â†’ true   |

Example:

```js
let word = "JavaScript";
console.log(word.startsWith("Java")); // true
console.log(word.endsWith("Script")); // true
```

---

### 4.8 String Comparison

- Strings can be compared with `<`, `>`, `==`, `===` using lexicographic (dictionary) order.

```js
console.log("apple" < "banana"); // true
console.log("2" < "10"); // false (because '2' > '1' lex order)
```

---

## 5. Template Literals

- Introduced in ES6, allows multi-line strings and expression interpolation.

```js
let name = "Venky";
let age = 25;

let message = `Hello, my name is ${name} and I am ${age} years old.`;
console.log(message);
```

---

## 6. Escape Sequences

| Escape Sequence | Meaning           |
| --------------- | ----------------- |
| `\'`            | Single quote      |
| `\"`            | Double quote      |
| `\\`            | Backslash         |
| `\n`            | New line          |
| `\r`            | Carriage return   |
| `\t`            | Tab               |
| `\b`            | Backspace         |
| `\f`            | Form feed         |
| `\uXXXX`        | Unicode character |

Example:

```js
console.log("Line1\nLine2");
console.log("Tab\tspace");
```

---

## 7. Immutability of Strings

- Strings cannot be changed once created. Operations return new strings.

```js
let s = "hello";
s[0] = "H"; // Has no effect
console.log(s); // "hello"

let s2 = "Hello".toUpperCase();
console.log(s2); // "HELLO"
```

---

## 8. Summary of Most Used String Methods

| Method          | Purpose                |
| --------------- | ---------------------- |
| `length`        | String length          |
| `charAt()`      | Character at index     |
| `indexOf()`     | First occurrence index |
| `includes()`    | Contains substring?    |
| `slice()`       | Extract substring      |
| `toLowerCase()` | Lowercase conversion   |
| `toUpperCase()` | Uppercase conversion   |
| `trim()`        | Remove spaces at ends  |
| `split()`       | Split into array       |
| `replace()`     | Replace substring      |
| `startsWith()`  | Check start substring  |
| `endsWith()`    | Check end substring    |
| `repeat()`      | Repeat string N times  |

---
