| Method                    | Description                      |
| ------------------------- | -------------------------------- |
| `Object.keys(obj)`        | Get all keys                     |
| `Object.values(obj)`      | Get all values                   |
| `Object.entries(obj)`     | Key-value pairs as array         |
| `Object.assign()`         | Merge objects                    |
| `Object.freeze(obj)`      | Make object immutable            |
| `Object.seal(obj)`        | Prevent add/delete, allow modify |
| `Object.hasOwn(obj, key)` | Modern key check                 |
| `JSON.stringify(obj)`     | Convert to JSON string           |
| `JSON.parse(str)`         | Convert back to object           |
| `JSON.stringify(obj, replacer, space)` | Convert to JSON string with options |

Here is your **complete JavaScript Notes on Dot Notation vs Bracket Notation** with detailed **explanations, rules, syntax, comparisons, edge cases, and examples** ‚Äî perfect for **learning, revising, or teaching**.

---

# üìò JavaScript Object Property Access: Dot Notation vs Bracket Notation

---

## üî∂ What is a Property in JavaScript?

A **property** is a key-value pair associated with an object.

```js
const person = {
  name: "Venkatesh",
  age: 25
};
```

Here, `name` and `age` are **properties** of the `person` object.

---

## üü¢ Dot Notation (`object.property`)

### ‚úÖ Syntax:

```js
object.propertyName
```

### ‚úÖ Use When:

* Property names are **valid identifiers**:

  * Only letters, digits, `$`, and `_`
  * Must not start with a digit
  * No spaces or special characters

### ‚úÖ Example:

```js
const user = {
  name: "John",
  age: 30
};

console.log(user.name); // John
console.log(user.age);  // 30
```

### üî¥ Invalid Case with Dot Notation:

```js
const book = {
  "book-title": "JS Mastery"
};

// console.log(book.book-title); ‚ùå Syntax Error
```

---

## üü° Bracket Notation (`object["property"]`)

### ‚úÖ Syntax:

```js
object["propertyName"]
```

### ‚úÖ Use When:

* Property name is **stored in a variable**
* Property name contains **spaces**, **hyphens**, or starts with a **number**
* You're **generating property names dynamically**

### ‚úÖ Example:

```js
const book = {
  "book-title": "JavaScript Mastery",
  "author name": "Venkatesh"
};

console.log(book["book-title"]);     // ‚úÖ JavaScript Mastery
console.log(book["author name"]);    // ‚úÖ Venkatesh

let key = "book-title";
console.log(book[key]);              // ‚úÖ JavaScript Mastery
```

---

## üîÑ Comparison Table

| Feature                    | Dot Notation  | Bracket Notation     |
| -------------------------- | ------------- | -------------------- |
| Syntax                     | `obj.prop`    | `obj["prop"]`        |
| Supports variable as key   | ‚ùå             | ‚úÖ                    |
| Supports keys with spaces  | ‚ùå             | ‚úÖ                    |
| Supports keys with hyphens | ‚ùå             | ‚úÖ                    |
| Best used for              | Static keys   | Dynamic/special keys |
| Common errors              | Syntax errors | Typos, string errors |

---

## üß† Rules of Use

### ‚úÖ Dot Notation Allowed for:

```js
obj.key
obj._privateKey
obj.$price
obj.camelCase
```

### ‚ùå Dot Notation Fails for:

```js
obj.123name     // starts with number ‚ùå
obj."first name" // has space ‚ùå
obj.my-key      // has hyphen ‚ùå
```

---

## üß™ Practical Examples

### 1Ô∏è‚É£ Accessing with Static Property

```js
const car = {
  brand: "Toyota",
  model: "Innova"
};

console.log(car.brand);         // ‚úÖ Toyota
console.log(car["model"]);      // ‚úÖ Innova
```

---

### 2Ô∏è‚É£ Accessing with Dynamic Key

```js
const prop = "brand";
console.log(car[prop]);         // ‚úÖ Toyota

// ‚ùå car.prop ‚Üí undefined (not dynamic)
```

---

### 3Ô∏è‚É£ Special Characters in Keys

```js
const product = {
  "product-name": "Laptop",
  "price in $": 999
};

console.log(product["product-name"]);  // ‚úÖ Laptop
console.log(product["price in $"]);    // ‚úÖ 999
```

---

### 4Ô∏è‚É£ Adding and Updating Properties

```js
const obj = {};

// Dot notation
obj.name = "Venkatesh";

// Bracket notation
obj["course"] = "MERN Stack";

console.log(obj); // { name: 'Venkatesh', course: 'MERN Stack' }
```

---

### 5Ô∏è‚É£ Looping Through Properties

```js
const student = {
  name: "Venkatesh",
  dept: "CSE",
  roll: 101
};

for (let key in student) {
  console.log(key, "=>", student[key]);  // Use bracket for dynamic access
}
```

---

## üîÅ Mixed Usage Example

```js
const settings = {
  theme: "dark",
  "font-size": 16
};

let key = "theme";
console.log(settings.theme);        // ‚úÖ Dot
console.log(settings[key]);         // ‚úÖ Bracket with variable
console.log(settings["font-size"]); // ‚úÖ Bracket with special character
```

---

## ‚ö†Ô∏è Common Mistakes

| Mistake                                 | Fix                                  |
| --------------------------------------- | ------------------------------------ |
| `obj.prop` when `prop` is variable      | Use `obj[prop]` instead              |
| Using dot notation for keys with hyphen | Use `obj["my-key"]` instead          |
| Forgetting quotes in bracket notation   | Must be `obj["key"]`, not `obj[key]` |

---

## ‚úÖ Summary

* Use **dot notation** for **simple, static keys**.
* Use **bracket notation** for:

  * **Dynamic keys**
  * Keys with **spaces**, **hyphens**, or **starting numbers**

---

## üßë‚Äçüíª Quick Demo Code

```js
const obj = {
  name: "Venky",
  "user-role": "admin"
};

const key = "name";

console.log(obj.name);          // ‚úÖ dot notation
console.log(obj[key]);          // ‚úÖ bracket with variable
console.log(obj["user-role"]); // ‚úÖ bracket with special character

// Modify and add
obj["new key"] = "value";
obj.age = 22;

console.log(obj);
```

---

