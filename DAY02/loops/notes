Absolutely! Here's a **comprehensive notes-style explanation of Loops in JavaScript**, written like proper study material for learners, interviews, and reference.

---

# 🔁 JavaScript Loops – Complete Notes

---

## 🔷 What Are Loops?

Loops are used to **execute a block of code repeatedly**, based on a condition.

### 🔑 Why use loops?

* To **avoid repetitive code**
* To **iterate** over data (arrays, strings, objects)
* For **automation** (counting, summing, checking)

---

## 🧩 Types of Loops in JavaScript

| Loop Type    | Best Used For                                       |
| ------------ | --------------------------------------------------- |
| `for`        | When number of iterations is **known**              |
| `while`      | When condition is evaluated **before each loop**    |
| `do...while` | When loop should run **at least once**              |
| `for...of`   | When looping through **values** of iterable         |
| `for...in`   | When looping through **keys/properties** of objects |

---

## ✅ 1. `for` Loop – Most Common

```js
for (let i = 1; i <= 5; i++) {
  console.log(i);
}
```

### Breakdown:

* **Initialization**: `let i = 1`
* **Condition**: `i <= 5` (checked before each iteration)
* **Update**: `i++` (runs after each iteration)

> 💡 Best when number of iterations is known.

---

## ✅ 2. `while` Loop – Condition Based

```js
let i = 1;

while (i <= 5) {
  console.log(i);
  i++;
}
```

### Key Point:

* Condition is checked **before** the block runs.
* If condition is `false` from the start, block is **never run**.

---

## ✅ 3. `do...while` Loop – Runs At Least Once

```js
let i = 1;

do {
  console.log(i);
  i++;
} while (i <= 5);
```

### Key Point:

* Code block is executed **first**, condition is checked **after**.

---

## ✅ 4. `for...of` Loop – For Iterable Values

```js
let colors = ["red", "blue", "green"];

for (let color of colors) {
  console.log(color);
}
```

### Supports:

* Arrays
* Strings
* Maps
* Sets

> ❌ Does **not** work on plain objects.

---

## ✅ 5. `for...in` Loop – For Object Properties

```js
let person = {
  name: "Venky",
  age: 25
};

for (let key in person) {
  console.log(`${key}: ${person[key]}`);
}
```

### Key Point:

* Use when working with **object keys**
* Also works with arrays (but not recommended)

---

## ✅ 6. `break` and `continue`

```js
// break – exits the loop
for (let i = 1; i <= 5; i++) {
  if (i === 3) break;
  console.log(i); // Output: 1 2
}

// continue – skips current iteration
for (let i = 1; i <= 5; i++) {
  if (i === 3) continue;
  console.log(i); // Output: 1 2 4 5
}
```

---

## ✅ 7. Infinite Loops (⚠️ Use Carefully)

```js
while (true) {
  console.log("Running forever");
  break; // break to avoid infinite loop
}
```

---

## ✅ 8. Nested Loops

```js
for (let i = 1; i <= 3; i++) {
  for (let j = 1; j <= 2; j++) {
    console.log(`Row ${i}, Column ${j}`);
  }
}
```

> Often used in matrices, tables, patterns.

---

## ✅ 9. Looping Through a String

```js
let name = "Venky";

for (let char of name) {
  console.log(char); // V e n k y
}
```

---

## ✅ 10. Array `forEach()` – Functional Style

```js
let nums = [1, 2, 3];

nums.forEach(function(num, index) {
  console.log(`Index ${index}: ${num}`);
});
```

> `forEach()` is **cleaner** but **can’t break or continue** inside loop.

---

## 🧠 Interview Tip: Loop Complexity

| Loop Type    | Performance | Break/Continue Support |
| ------------ | ----------- | ---------------------- |
| `for`        | Fast        | ✅                      |
| `while`      | Fast        | ✅                      |
| `do...while` | Fast        | ✅                      |
| `for...of`   | Slower      | ✅                      |
| `forEach()`  | Slowest     | ❌                      |

---

## 🧪 Practice Examples

### 1. Sum of numbers from 1 to 10

```js
let sum = 0;
for (let i = 1; i <= 10; i++) {
  sum += i;
}
console.log(sum); // 55
```

---

### 2. Print even numbers using `while`

```js
let i = 2;
while (i <= 10) {
  console.log(i);
  i += 2;
}
```

---

### 3. Pattern using nested `for`

```js
let rows = 5;
for (let i = 1; i <= rows; i++) {
  let stars = "";
  for (let j = 1; j <= i; j++) {
    stars += "* ";
  }
  console.log(stars);
}
```

---

## ✅ Summary Table

| Loop Type    | Description                     | Use For                               |
| ------------ | ------------------------------- | ------------------------------------- |
| `for`        | Counter-controlled loop         | Known number of iterations            |
| `while`      | Condition-controlled loop       | Until a condition is no longer true   |
| `do...while` | Runs at least once              | Validate user input, retry once logic |
| `for...of`   | Iterates values in array/string | Arrays, Strings, Maps, Sets           |
| `for...in`   | Iterates keys in object         | Objects                               |
| `forEach()`  | Functional array loop           | Simple iteration (no break/continue)  |

---

