Perfect! Let's dive into **JavaScript Operators** in full detail — covering every operator type with **clear examples**, **real-life use cases**, and **interview tips**.

---

# ⚙️ JavaScript Operators – Full Notes

Operators are symbols used to **perform operations** on values and variables.

---

## 🧩 1. **Assignment Operators**

| Operator | Example  | Meaning         |
| -------- | -------- | --------------- |
| `=`      | `x = 10` | Assigns 10 to x |
| `+=`     | `x += 5` | x = x + 5       |
| `-=`     | `x -= 3` | x = x - 3       |
| `*=`     | `x *= 2` | x = x \* 2      |
| `/=`     | `x /= 4` | x = x / 4       |
| `%=`     | `x %= 2` | x = x % 2       |

```js
let score = 10;
score += 5;
console.log(score); // 15
```

---

## 🔢 2. **Arithmetic Operators**

| Operator | Example  | Description         |
| -------- | -------- | ------------------- |
| `+`      | `5 + 2`  | Addition            |
| `-`      | `5 - 2`  | Subtraction         |
| `*`      | `5 * 2`  | Multiplication      |
| `/`      | `5 / 2`  | Division            |
| `%`      | `5 % 2`  | Modulus (Remainder) |
| `**`     | `2 ** 3` | Exponentiation      |
| `++`     | `x++`    | Increment           |
| `--`     | `x--`    | Decrement           |

```js
let a = 5;
let b = 2;
console.log(a % b); // 1 (remainder)
console.log(a ** b); // 25 (5^2)
```

---

## ✅ 3. **Comparison Operators**

Used to compare two values. Result is always `true` or `false`.

| Operator | Example     | Description                  |
| -------- | ----------- | ---------------------------- |
| `==`     | `5 == '5'`  | Equal (loose)                |
| `===`    | `5 === 5`   | Equal (strict: value + type) |
| `!=`     | `5 != '5'`  | Not equal (loose)            |
| `!==`    | `5 !== '5'` | Not equal (strict)           |
| `>`      | `5 > 2`     | Greater than                 |
| `<`      | `2 < 5`     | Less than                    |
| `>=`     | `5 >= 5`    | Greater than or equal to     |
| `<=`     | `3 <= 5`    | Less than or equal to        |

```js
console.log(5 == "5"); // true (type not checked)
console.log(5 === "5"); // false (type checked)
```

---

## 🔄 4. **Logical Operators**

Used to combine multiple conditions.

| Operator | Meaning             | Example                 |                  |        |     |                |
| -------- | ------------------- | ----------------------- | ---------------- | ------ | --- | -------------- |
| `&&`     | AND (both true)     | `true && false → false` |                  |        |     |                |
| \`       |                     | \`                      | OR (either true) | \`true |     | false → true\` |
| `!`      | NOT (negates truth) | `!true → false`         |                  |        |     |                |

```js
let age = 20;
let hasLicense = true;

if (age >= 18 && hasLicense) {
  console.log("You can drive");
}
```

---

## 🧠 5. **Unary Operators**

Operate on a **single operand**.

| Operator | Description | Example         |
| -------- | ----------- | --------------- |
| `typeof` | Type check  | `typeof 5`      |
| `!`      | Logical NOT | `!true → false` |
| `++`     | Increment   | `x++`           |
| `--`     | Decrement   | `x--`           |

```js
let name = "Venky";
console.log(typeof name); // string
```

---

## 🔄 6. **Ternary Operator**

Short `if...else`:

```js
let age = 16;
let access = age >= 18 ? "Allowed" : "Denied";
console.log(access); // Denied
```

> Format: `condition ? trueResult : falseResult`

---

## 🔀 7. **String Operators**

```js
let fname = "Venky";
let lname = " M";

console.log(fname + lname); // "Venky M"
```

> `+` joins strings (concatenation)

---

## 🔗 8. **Bitwise Operators** (Advanced)

Works at binary level.

| Operator | Meaning     | Example  |     |     |
| -------- | ----------- | -------- | --- | --- |
| `&`      | AND         | `5 & 1`  |     |     |
| \`       | \`          | OR       | \`5 | 1\` |
| `^`      | XOR         | `5 ^ 1`  |     |     |
| `~`      | NOT         | `~5`     |     |     |
| `<<`     | Left Shift  | `5 << 1` |     |     |
| `>>`     | Right Shift | `5 >> 1` |     |     |

```js
console.log(5 & 1); // 1
console.log(5 | 1); // 5
```

---

## 🧠 9. **Nullish Coalescing Operator `??`**

Returns **right-hand** value **only if left is `null` or `undefined`**.

```js
let name = null;
let finalName = name ?? "Guest";
console.log(finalName); // Guest
```

---

## 🔍 10. **Optional Chaining `?.`**

Safely access deep properties.

```js
let user = {
  profile: {
    name: "Venky",
  },
};

console.log(user?.profile?.name); // Venky
console.log(user?.settings?.theme); // undefined (no error)
```

---

## ✅ Summary Table

| Type           | Operators                                      |                           |         |
| -------------- | ---------------------------------------------- | ------------------------- | ------- |
| Assignment     | `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `**=`       |                           |         |
| Arithmetic     | `+`, `-`, `*`, `/`, `%`, `++`, `--`, `**`      |                           |         |
| Comparison     | `==`, `===`, `!=`, `!==`, `>`, `<`, `>=`, `<=` |                           |         |
| Logical        | `&&`, \`                                       |                           | `, `!\` |
| String         | `+`, `+=` (concatenation)                      |                           |         |
| Ternary        | `condition ? value1 : value2`                  |                           |         |
| Bitwise (adv.) | `&`, \`                                        | `, `^`, `\~`, `<<`, `>>\` |         |
| Type Checking  | `typeof`, `instanceof`                         |                           |         |
| Nullish        | `??`                                           |                           |         |
| Optional Chain | `?.`                                           |                           |         |

---

## 🧪 Real-Life Example: Login Check

```js
let username = "";
let loginUser = username || "Guest"; // fallback if username is falsy

let user = {
  name: "Venky",
  permissions: null,
};

let permission = user.permissions ?? "Read Only";
console.log(permission); // "Read Only"
```

---
