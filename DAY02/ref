## JavaScript Fundamentals – Detailed and Optimized Notes

---

### 1. **Introduction to Variables**

* A **variable** is a named container used to store data that can be referenced and manipulated later in the program.
* Think of a variable as a label attached to a value.

```js
let name = "Venkatesh";
console.log(name); // Output: Venkatesh
```

* `let`, `var`, and `const` are used to declare variables.

---

### 2. **`var` vs `let` vs `const`**

| Keyword | Scope    | Redeclarable | Reassignable | Hoisted |
| ------- | -------- | ------------ | ------------ | ------- |
| `var`   | Function | Yes          | Yes          | Yes     |
| `let`   | Block    | No           | Yes          | No      |
| `const` | Block    | No           | No           | No      |

* **`var`** is function-scoped, can be hoisted, and allows redeclaration and reassignment.
* **`let`** is block-scoped, cannot be redeclared in the same scope, and can be reassigned.
* **`const`** is block-scoped, cannot be redeclared or reassigned. It is used for constants.

```js
var a = 10;
var a = 20; // allowed

let b = 30;
// let b = 40; // Error: already declared

const c = 50;
// c = 60; // Error: cannot reassign a constant
```

---

### 3. **Data Types in JavaScript**

JavaScript has two types of data types:

#### Primitive Types (Immutable):

* `string`, `number`, `boolean`, `null`, `undefined`, `symbol`, `bigint`

#### Reference Types (Mutable):

* `object`, `array`, `function`

```js
let str = "Hello";       // string
let num = 42;            // number
let bool = true;         // boolean
let empty = null;        // null
let notDefined;          // undefined
let id = Symbol("id");  // symbol
let big = 123456789012345678901n; // bigint

let obj = { name: "Venky" }; // object
let arr = [1, 2, 3];          // array
let func = function() { console.log("Hi"); }; // function
```

---

### 4. **Type Conversion (Implicit vs Explicit)**

JavaScript automatically converts data types in some cases (type coercion).

#### Implicit:

```js
console.log("5" + 1); // "51" - number is converted to string
console.log("5" - 1); // 4   - string is converted to number
```

#### Explicit:

```js
let strNum = "123";
let num = Number(strNum); // converts string to number
console.log(typeof num); // "number"

let n = 10;
let str = String(n);     // converts number to string
```

---

### 5. **Operators in JavaScript**

#### Arithmetic Operators:

```js
+, -, *, /, %, ** (exponentiation)
console.log(2 ** 3); // 8
```

#### Assignment Operators:

```js
=, +=, -=, *=, /=
let x = 5;
x += 3; // x = 8
```

#### Comparison Operators:

```js
== (loose equality), === (strict equality), !=, !==, <, >, <=, >=
console.log(5 == "5");  // true
console.log(5 === "5"); // false
```

#### Logical Operators:

```js
&& (AND), || (OR), ! (NOT)
```

#### Unary Operators:

```js
typeof, ++, --
console.log(typeof 123); // "number"
```

#### Ternary Operator:

```js
condition ? value_if_true : value_if_false
let age = 18;
let access = (age >= 18) ? "Granted" : "Denied";
```

---

### 6. **Conditional Statements**

Used to control program flow:

```js
if (condition) {
  // code
} else if (another_condition) {
  // code
} else {
  // code
}
```

Example:

```js
let score = 85;
if (score >= 90) {
  console.log("A");
} else if (score >= 80) {
  console.log("B");
} else {
  console.log("C");
}
```

---

### 7. **Loops and Nested Loops**

#### for loop:

```js
for (let i = 1; i <= 3; i++) {
  console.log("i =", i);
}
```

#### Nested loop:

```js
for (let i = 1; i <= 2; i++) {
  for (let j = 1; j <= 3; j++) {
    console.log(`i=${i}, j=${j}`);
  }
}
```

---

### 8. **while Loop**

Executes code while condition is true.

```js
let i = 1;
while (i <= 3) {
  console.log(i);
  i++;
}
```

---

### 9. **do...while Loop**

Executes once before checking condition.

```js
let i = 1;
do {
  console.log(i);
  i++;
} while (i <= 3);
```

---

### 10. **Functions**

Reusable blocks of code.

```js
// Declaration
function greet(name) {
  console.log("Hello " + name);
}

// Expression
const sayHi = function() {
  console.log("Hi");
};

// Arrow Function
const add = (a, b) => a + b;
```

---

### 11. **Arguments vs Parameters**

* Parameters are placeholders in function definition.
* Arguments are real values passed.

```js
function add(x, y) { // parameters
  return x + y;
}
add(5, 3); // arguments
```

---

### 12. **Default Parameters**

```js
function greet(name = "Guest") {
  console.log("Hello " + name);
}
greet(); // Hello Guest
```

---

### 13. **Timers**

* `setTimeout`: runs once after delay
* `setInterval`: runs repeatedly

```js
setTimeout(() => {
  console.log("After 2s");
}, 2000);

let count = 0;
let id = setInterval(() => {
  console.log("Interval", ++count);
  if (count === 3) clearInterval(id);
}, 1000);
```

---

### 14. **String Repetition vs Concatenation**

```js
let name = "Venky";
console.log("Hi " + name + "!"); // Concatenation
console.log("Hi! ".repeat(3)); // Repetition
```

---

### 15. **Practice Problems**

**FizzBuzz:**

```js
for (let i = 1; i <= 20; i++) {
  if (i % 3 === 0 && i % 5 === 0) console.log("FizzBuzz");
  else if (i % 3 === 0) console.log("Fizz");
  else if (i % 5 === 0) console.log("Buzz");
  else console.log(i);
}
```

**Multiplication Table:**

```js
let n = 5;
for (let i = 1; i <= 10; i++) {
  console.log(`${n} * ${i} = ${n * i}`);
}
```

**Even/Odd Checker:**

```js
let num = 7;
console.log(num % 2 === 0 ? "Even" : "Odd");
```

---

### 16. **Optimized Solutions**

Using higher-order methods and efficient code:

```js
let numbers = [1, 2, 3, 4, 5, 6];
let evens = numbers.filter(num => num % 2 === 0);
console.log(evens); // [2, 4, 6]
```

---

### 17. **Math Operations Between Data Types**

```js
5 + 3        // 8
5 + "3"      // "53"
"10" - 2     // 8
true + 1     // 2
null + 1     // 1
undefined + 1 // NaN
10n + 5      // ❌ Error
[1] + 1      // "11"
{} + 1       // "[object Object]1"
```

### Summary Table

| Operation          | Behavior                 | Example         | Result                       |
| ------------------ | ------------------------ | --------------- | ---------------------------- |
| Number + Number    | Addition                 | `5 + 3`         | `8`                          |
| Number + String    | Concatenation            | `5 + "3"`       | "53"                         |
| String - Number    | Converted to number      | `"10" - 2`      | `8`                          |
| Boolean + Number   | Boolean → 1 or 0         | `true + 1`      | `2`                          |
| null + Number      | null → 0                 | `null + 1`      | `1`                          |
| undefined + Number | NaN                      | `undefined + 1` | `NaN`                        |
| BigInt + Number    | ❌ Error                  | `10n + 5`       | ❌ TypeError                  |
| Array + Number     | Array → string or number | `[1] + 1`       | "11"                         |
| Object + Number    | Object → string or NaN   | `{}` + 1        | "\[object Object]1" or `NaN` |
