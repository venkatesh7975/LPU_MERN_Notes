# React + Tailwind + Routing + Data Fetching — Detailed Guide

---

## 1. Fetch Data from Server & Display on Website

### Steps:

- Use React’s `useEffect` hook to fetch data once the component mounts.
- Use `fetch` or `axios` to make HTTP requests to your backend API.
- Store data in component state using `useState`.
- Render data in JSX.

### Example:

```jsx
import React, { useState, useEffect } from "react";

function ProductList() {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch("http://localhost:3000/products") // Your API endpoint
      .then((res) => res.json())
      .then((data) => {
        setProducts(data);
        setLoading(false);
      })
      .catch((err) => console.error(err));
  }, []); // Empty dependency => run once on mount

  if (loading) return <div>Loading...</div>;

  return (
    <div>
      {products.map((prod) => (
        <div key={prod.id}>
          <h3>{prod.title}</h3>
          <p>Price: ₹{prod.price}</p>
        </div>
      ))}
    </div>
  );
}
```

---

## 2. Filtering and Sorting Data

### Filtering example (filter by category):

```jsx
const [filter, setFilter] = useState("");

const filteredProducts = filter
  ? products.filter((p) => p.category === filter)
  : products;
```

### Sorting example (sort by price ascending or descending):

```jsx
const [sortOrder, setSortOrder] = useState("asc");

const sortedProducts = filteredProducts.sort((a, b) =>
  sortOrder === "asc" ? a.price - b.price : b.price - a.price
);
```

### Render with controls:

```jsx
<div>
  <select onChange={(e) => setFilter(e.target.value)}>
    <option value="">All Categories</option>
    <option value="men's clothing">Men's Clothing</option>
    <option value="women's clothing">Women's Clothing</option>
  </select>

  <select onChange={(e) => setSortOrder(e.target.value)}>
    <option value="asc">Price Low to High</option>
    <option value="desc">Price High to Low</option>
  </select>

  {sortedProducts.map((product) => (
    <div key={product.id}>
      <h3>{product.title}</h3>
      <p>₹{product.price}</p>
    </div>
  ))}
</div>
```

---

## 3. Routing in React

### What is routing?

- Routing allows your app to render different components based on the URL.
- In React, we use **React Router** for client-side routing.

### Installation

```bash
npm install react-router-dom
```

---

## 4. Basic Routing Setup

```jsx
import { BrowserRouter as Router, Routes, Route, Link } from "react-router-dom";

function App() {
  return (
    <Router>
      <nav>
        <Link to="/">Home</Link> | <Link to="/products">Products</Link>
      </nav>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/products" element={<ProductList />} />
      </Routes>
    </Router>
  );
}
```

---

## 5. Dynamic Routing

- Dynamic routes allow URLs with variables, e.g., `/products/:id`.
- Used to show details pages per product.

### Defining a dynamic route

```jsx
<Route path="/products/:id" element={<ProductDetails />} />
```

### Accessing route params in component

```jsx
import { useParams } from "react-router-dom";

function ProductDetails() {
  const { id } = useParams();
  // Fetch product by id
  // Display product details
}
```

---

## 6. Fetching Data in Dynamic Route

```jsx
function ProductDetails() {
  const { id } = useParams();
  const [product, setProduct] = useState(null);

  useEffect(() => {
    fetch(`http://localhost:3000/products/${id}`)
      .then((res) => res.json())
      .then((data) => setProduct(data))
      .catch(console.error);
  }, [id]);

  if (!product) return <div>Loading...</div>;

  return (
    <div>
      <h2>{product.title}</h2>
      <p>Price: ₹{product.price}</p>
      <p>{product.description}</p>
    </div>
  );
}
```

---

## 7. Tailwind CSS Setup and Usage

### Setup Tailwind CSS (React project)

1. Install dependencies:

```bash
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

2. Configure `tailwind.config.js`:

```js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}", // Tailwind scans these files for class names
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
```

3. Add Tailwind directives to your `src/index.css`:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

4. Import the CSS file in `src/index.js` or `src/App.js`:

```js
import "./index.css";
```

---

## 8. Tailwind CSS Example for Product Cards

```jsx
<div className="max-w-sm rounded overflow-hidden shadow-lg p-4 m-4 bg-white">
  <img
    className="w-full h-48 object-cover"
    src={product.image}
    alt={product.title}
  />
  <div className="px-6 py-4">
    <div className="font-bold text-xl mb-2">{product.title}</div>
    <p className="text-gray-700 text-base">₹{product.price}</p>
  </div>
</div>
```

---

## 9. Full Example Putting It All Together

```jsx
import React, { useEffect, useState } from "react";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Link,
  useParams,
} from "react-router-dom";

function ProductList() {
  const [products, setProducts] = useState([]);
  const [filter, setFilter] = useState("");
  const [sortOrder, setSortOrder] = useState("asc");

  useEffect(() => {
    fetch("http://localhost:3000/products")
      .then((res) => res.json())
      .then(setProducts)
      .catch(console.error);
  }, []);

  let filtered = filter
    ? products.filter((p) => p.category === filter)
    : products;

  filtered.sort((a, b) =>
    sortOrder === "asc" ? a.price - b.price : b.price - a.price
  );

  return (
    <div className="p-4">
      <div className="flex gap-4 mb-4">
        <select
          className="border p-2"
          onChange={(e) => setFilter(e.target.value)}
          value={filter}
        >
          <option value="">All Categories</option>
          <option value="men's clothing">Men's Clothing</option>
          <option value="women's clothing">Women's Clothing</option>
          <option value="jewelery">Jewelery</option>
          <option value="electronics">Electronics</option>
        </select>

        <select
          className="border p-2"
          onChange={(e) => setSortOrder(e.target.value)}
          value={sortOrder}
        >
          <option value="asc">Price Low to High</option>
          <option value="desc">Price High to Low</option>
        </select>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {filtered.map((product) => (
          <Link
            to={`/products/${product.id}`}
            key={product.id}
            className="border rounded p-4 hover:shadow-lg"
          >
            <img
              src={product.image}
              alt={product.title}
              className="w-full h-48 object-contain mb-2"
            />
            <h3 className="font-semibold text-lg">{product.title}</h3>
            <p className="text-gray-700">₹{product.price}</p>
          </Link>
        ))}
      </div>
    </div>
  );
}

function ProductDetails() {
  const { id } = useParams();
  const [product, setProduct] = useState(null);

  useEffect(() => {
    fetch(`http://localhost:3000/products/${id}`)
      .then((res) => res.json())
      .then(setProduct)
      .catch(console.error);
  }, [id]);

  if (!product) return <div>Loading...</div>;

  return (
    <div className="p-4 max-w-xl mx-auto">
      <img
        src={product.image}
        alt={product.title}
        className="w-full h-64 object-contain mb-4"
      />
      <h1 className="text-3xl font-bold mb-2">{product.title}</h1>
      <p className="text-gray-700 text-lg mb-4">₹{product.price}</p>
      <p>{product.description}</p>
      <p className="mt-4 font-semibold">Category: {product.category}</p>
      <p>
        Rating: {product.rating?.rate} ({product.rating?.count} reviews)
      </p>
      <Link
        to="/products"
        className="inline-block mt-6 text-blue-500 hover:underline"
      >
        Back to Products
      </Link>
    </div>
  );
}

export default function App() {
  return (
    <Router>
      <nav className="bg-gray-800 text-white p-4 mb-6">
        <div className="container mx-auto flex justify-between">
          <Link to="/" className="text-xl font-bold">
            My Store
          </Link>
          <Link to="/products" className="hover:underline">
            Products
          </Link>
        </div>
      </nav>

      <Routes>
        <Route
          path="/"
          element={
            <h1 className="text-center text-2xl mt-10">Welcome to My Store</h1>
          }
        />
        <Route path="/products" element={<ProductList />} />
        <Route path="/products/:id" element={<ProductDetails />} />
      </Routes>
    </Router>
  );
}
```

---

# Summary & Best Practices

| Concept             | Tips                                                                                     |
| ------------------- | ---------------------------------------------------------------------------------------- |
| `useEffect`         | Fetch data inside `useEffect` with empty deps to load once; clean up if needed           |
| State Management    | Use `useState` to hold fetched data, filters, and sort order                             |
| Filtering & Sorting | Apply filter first, then sort the filtered array for performance                         |
| Routing             | Use React Router v6 (`Routes`, `Route` components), `useParams` for dynamic route params |
| Tailwind CSS        | Use utility classes for responsive grid, spacing, typography, and hover effects          |
| Linking             | Use `Link` from react-router-dom for client-side navigation without page reload          |
| Error Handling      | Add loading and error states when fetching data                                          |

---

Certainly! Here's a **comprehensive explanation of `react-router-dom`**, the standard routing library for React web applications, covering its core concepts, components, and usage patterns.

---

# Complete Guide to `react-router-dom`

---

## 1. What is `react-router-dom`?

- A **routing library** for React applications running in the browser.
- Enables **single-page application (SPA)** behavior by handling URL changes without full page reloads.
- Maps URL paths to React components to control what gets rendered based on the URL.

---

## 2. Installation

```bash
npm install react-router-dom
```

---

## 3. Basic Concepts & Components

| Component / Hook  | Purpose                                                |
| ----------------- | ------------------------------------------------------ |
| `<BrowserRouter>` | Wraps your app; uses HTML5 history API for clean URLs  |
| `<Routes>`        | Container for all your `<Route>` elements (v6+)        |
| `<Route>`         | Defines a route path and which component to render     |
| `<Link>`          | Navigation component for client-side route changes     |
| `<NavLink>`       | Like `<Link>`, but adds styling attributes when active |
| `useNavigate`     | Hook to navigate programmatically                      |
| `useParams`       | Hook to access dynamic URL parameters                  |
| `useLocation`     | Hook to get current URL location object                |
| `useMatch`        | Hook to match the current URL against a path           |
| `<Navigate>`      | Redirect component                                     |
| `<Outlet>`        | Renders child routes in nested routing                 |

---

## 4. How to Use — Core API

### 4.1 Wrap your app with `<BrowserRouter>`

```jsx
import { BrowserRouter } from "react-router-dom";

function App() {
  return <BrowserRouter>{/* Your app components and routes */}</BrowserRouter>;
}
```

---

### 4.2 Define Routes with `<Routes>` and `<Route>`

```jsx
import { Routes, Route } from "react-router-dom";

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} /> {/* Root path */}
        <Route path="/about" element={<About />} /> {/* About page */}
        <Route path="/products" element={<Products />} />
        <Route path="/products/:id" element={<ProductDetails />} /> {/* Dynamic */}
        <Route path="*" element={<NotFound />} /> {/* Catch-all for 404 */}
      </Routes>
    </BrowserRouter>
  );
}
```

---

### 4.3 Navigating Between Routes

- Use `<Link>` instead of `<a>` for client-side navigation (no page reload):

```jsx
import { Link } from "react-router-dom";

function Navbar() {
  return (
    <nav>
      <Link to="/">Home</Link> | <Link to="/products">Products</Link>
    </nav>
  );
}
```

- Use `<NavLink>` for active link styling:

```jsx
<NavLink
  to="/products"
  className={({ isActive }) => (isActive ? "active" : "")}
>
  Products
</NavLink>
```

---

### 4.4 Access URL Parameters with `useParams`

- When route path has dynamic segments (e.g. `/products/:id`):

```jsx
import { useParams } from "react-router-dom";

function ProductDetails() {
  const { id } = useParams(); // Get product id from URL
  // Fetch product using id or render details
}
```

---

### 4.5 Programmatic Navigation with `useNavigate`

- Navigate from event handlers (e.g., after form submission):

```jsx
import { useNavigate } from "react-router-dom";

function Signin() {
  const navigate = useNavigate();

  const handleLogin = () => {
    // Authenticate user...
    navigate("/dashboard"); // Redirect on success
  };

  return <button onClick={handleLogin}>Login</button>;
}
```

---

## 5. Nested Routes & `<Outlet>`

- Nest routes inside parent routes to create layouts:

```jsx
function DashboardLayout() {
  return (
    <div>
      <h2>Dashboard</h2>
      <Outlet /> {/* Render child routes here */}
    </div>
  );
}

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="dashboard" element={<DashboardLayout />}>
          <Route path="profile" element={<Profile />} />
          <Route path="settings" element={<Settings />} />
        </Route>
      </Routes>
    </BrowserRouter>
  );
}
```

- URL `/dashboard/profile` renders `<DashboardLayout>` and inside it `<Profile>` at `<Outlet>`.

---

## 6. Redirecting & Guarding Routes

### 6.1 Redirect with `<Navigate>`

```jsx
import { Navigate } from "react-router-dom";

function PrivateRoute({ children }) {
  const isAuth = /* check if user is authenticated */;

  return isAuth ? children : <Navigate to="/signin" replace />;
}
```

Use it to protect routes:

```jsx
<Route
  path="/dashboard"
  element={
    <PrivateRoute>
      <Dashboard />
    </PrivateRoute>
  }
/>
```

`replace` prop prevents back button from returning to restricted page.

---

## 7. Route Matching Patterns

- `path="/"` matches exact root.
- `path="*"` matches all unmatched routes.
- Dynamic params: `/users/:userId`
- Optional params: `/users/:userId?` (React Router v6 doesn't support optional params natively, but you can mimic it with multiple routes)
- Wildcard: `/files/*` matches `/files/a/b/c`

---

## 8. `useLocation` & Query Params

- Access location object:

```jsx
import { useLocation } from "react-router-dom";

function SearchResults() {
  const location = useLocation();
  console.log(location.pathname); // current path
  console.log(location.search); // query string e.g. ?q=shoes

  // To parse query params use URLSearchParams
  const query = new URLSearchParams(location.search);
  const q = query.get("q");
}
```

---

## 9. Common Hooks Summary

| Hook          | Purpose                                     |
| ------------- | ------------------------------------------- |
| `useNavigate` | Navigate programmatically                   |
| `useParams`   | Access route parameters                     |
| `useLocation` | Access current location info (path, search) |
| `useMatch`    | Match a route path pattern                  |

---

## 10. Example — Simple React Router App

```jsx
import React from "react";
import {
  BrowserRouter,
  Routes,
  Route,
  Link,
  useParams,
} from "react-router-dom";

function Home() {
  return <h1>Home</h1>;
}

function Products() {
  return (
    <>
      <h1>Products</h1>
      <ul>
        <li>
          <Link to="1">Product 1</Link>
        </li>
        <li>
          <Link to="2">Product 2</Link>
        </li>
      </ul>
    </>
  );
}

function ProductDetails() {
  const { id } = useParams();
  return <h2>Details for Product {id}</h2>;
}

function NotFound() {
  return <h1>404 - Not Found</h1>;
}

export default function App() {
  return (
    <BrowserRouter>
      <nav>
        <Link to="/">Home</Link> | <Link to="/products">Products</Link>
      </nav>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/products" element={<Products />} />
        <Route path="/products/:id" element={<ProductDetails />} />
        <Route path="*" element={<NotFound />} />
      </Routes>
    </BrowserRouter>
  );
}
```

---

# Summary

| Feature                    | Description                                     |
| -------------------------- | ----------------------------------------------- |
| `<BrowserRouter>`          | Wraps app, manages history for SPA              |
| `<Routes>` & `<Route>`     | Define which component renders at which URL     |
| `<Link>`                   | Navigate without page reload                    |
| Dynamic Params             | Define with `:param`, access with `useParams()` |
| Programmatic Navigation    | Use `useNavigate()` to redirect via code        |
| Nested Routes & `<Outlet>` | Layout with nested views                        |
| Redirect & Guards          | `<Navigate>` for redirection, protect routes    |
| `useLocation`              | Get current URL and query string                |

---
